# Generated by YCM Generator at 2018-11-23 18:53:48.841023 # This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.  # # Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core

flags = [
    '-x',
    'c++',
    '-Wall',
    '-Wextra',
    '-Wreturn-type',
    '-Wfloat-equal',
    '-Wshadow',
    '-std=c++17',
    '-fopenmp',
    #'-isystem', '/usr/lib/clang/9.0.1/include',
    '-isystem', '/usr/lib64/gcc/x86_64-pc-linux-gnu/9.2.0/include',
    '-isystem', '/usr/include/c++/9.2.0/x86_64-pc-linux-gnu/bits',
    '-isystem', '/usr/include/c++/9.2.0',
    '-isystem', '/usr/include/c++/9.2.0/bits',
    '-isystem', '/usr/include/vtk',
    '-isystem', '/usr/include/eigen3',
    '-isystem', '/usr/include',
    '-isystem', '/usr/local/include',
    #'-isystem', '/usr/lib/openmpi/include',
    '-isystem', '/usr/local/include/ITK-5.0',
    '-I/home/oguz/workspace/adhoc/adhocpp/',
    '-I/home/oguz/workspace/adhoc/adhocpp/applications/materialInterfaces/vertebraBoundaryEnforcement',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/itkextension/itkdicomreader/inc',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/itkextension/itkdicomreader',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/utilities/inc',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/utilities/packages/',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/utilities/packages/voxelDomain',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/utilities',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/geokernel',
    '-I/home/oguz/workspace/adhoc/adhocpp/libraries/geokernel/inc',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/autoargs',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/autoargs/inc',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/trilinosextension',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/mklextension',
    '-I/home/oguz/workspace/adhoc/adhocpp/extensions/itkextension',
    '-I/home/oguz/workspace/adhoc/config/ext_sources_install/TPL/Trilinos/include/'
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
DIR_OF_THIS_SCRIPT = os.path.abspath( os.path.dirname( __file__ ) )
SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  #if 'impl.' in filename:
  #    return False
  #return extension in [ '.H', '.h', '.hxx', '.hpp', '.hh' ]
  return extension in [ '.h','.hpp', ]

def FindCorrespondingSourceFile( filename ):
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        return replacement_file
  return filename


def Settings( **kwargs ):
  if kwargs[ 'language' ] == 'cfamily':
    # If the file is a header, try to find the corresponding source file and
    # retrieve its flags from the compilation database if using one. This is
    # necessary since compilation databases don't have entries for header files.
    # In addition, use this source file as the translation unit. This makes it
    # possible to jump from a declaration in the header file to its definition
    # in the corresponding source file.
    filename = FindCorrespondingSourceFile( kwargs[ 'filename' ] )

    if not database:
      return {
        'flags': flags,
        'include_paths_relative_to_dir': DIR_OF_THIS_SCRIPT,
        'override_filename': filename
      }

    compilation_info = database.GetCompilationInfoForFile( filename )
    if not compilation_info.compiler_flags_:
      return {}

    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object.
    final_flags = list( compilation_info.compiler_flags_ )

    return {
      'flags': final_flags,
      'include_paths_relative_to_dir': compilation_info.compiler_working_dir_,
      'override_filename': filename
    }
  return {}

def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def GetStandardLibraryIndexInSysPath( sys_path ):
  for path in sys_path:
    if os.path.isfile( os.path.join( path, 'os.py' ) ):
      return sys_path.index( path )
  raise RuntimeError( 'Could not find standard library path in Python path.' )


